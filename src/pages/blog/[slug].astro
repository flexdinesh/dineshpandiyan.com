---
import { readOne, readAll } from "../../lib/markdoc/read";
import { blog } from "../../lib/markdoc/frontmatter.schema";
import Renderer from "../../components/Renderer.astro";
import ContentPageMeta from "../../components/ContentPageMeta.astro";
import ContentLayout from "../../layouts/ContentLayout.astro";
import { SITE_URL } from "../../config";

export async function getStaticPaths() {
  const posts = await readAll({
    directory: "blog",
    frontmatterSchema: blog,
  });

  const filteredPosts = posts
    .filter((p) =>
      import.meta.env.MODE !== "production"
        ? true
        : p.frontmatter.draft !== true
    )
    // we don't want to generate pages for posts that link to external websites
    .filter(({ frontmatter }) => !frontmatter.external);

  const ret = filteredPosts.map((post) => {
    const slug = post.slug;
    return {
      params: {
        slug: post.nonNumericSlug,
      },
      props: {
        actualSlug: slug,
        nonNumbericSlug: post.nonNumericSlug,
      },
    };
  });

  return ret;
}

const { slug } = Astro.params;
const {actualSlug, nonNumbericSlug} = Astro.props;

if (typeof slug !== "string") {
  throw Error(`slug should be string. Received: ${slug}`);
}

const { content, frontmatter } = await readOne({
  directory: "blog",
  slug: actualSlug,
  frontmatterSchema: blog,
});

const ogImageAbsoluteUrl =
  frontmatter.external === false && frontmatter.ogImagePath
    ? new URL(frontmatter.ogImagePath, SITE_URL)
    : undefined;
---

<ContentLayout title={frontmatter.title} date={frontmatter.date}>
  <ContentPageMeta
    title={frontmatter.title}
    description={frontmatter.external ? undefined : frontmatter.description}
    publishDate={frontmatter.date.toISOString()}
    ogImageAbsoluteUrl={ogImageAbsoluteUrl}
    pagePath={`/blog/${nonNumbericSlug}`}
    ogImageWidth={1200}
    ogImageHeight={630}
    slot="meta"
  />
  <Renderer content={content} slot="content" />
</ContentLayout>
